    @model _603211_PROKHORENKO.Models.PageListViewModel<_603211_PROKHORENKO.DAL.Entities.Dish>
    @*@model IEnumerable<_603211_PROKHORENKO.DAL.Entities.Dish>*@
@using System.Text;
    @{
        ViewBag.Title = "List";
    }
<h2>List</h2>

    @{
        // объект для "собирания" разметки
        StringBuilder result = new StringBuilder();
        // счетчик эскизов в строке
        var i = 0;
        TagBuilder row = new TagBuilder("div");
        foreach (var item in Model)
        {
            i++;
            if (i == 1) // для первого элемента в строке создаем новую строку
            {
                row = new TagBuilder("div");
                row.AddCssClass("row");
                row.AddCssClass("item-row");
            }
            row.InnerHtml += Html.Partial("ItemViewPartial", item);
            if (i == 3) // если строка закончена
            {
                // добавить строку в разметку
                result.Append(row.ToString());
            }
        }
        if (i != 3) // если последняя строка не заполнена
        {
            // добавить строку в разметку
            result.Append(row.ToString());
            // обнулить счетчик элементов в строкеi = 0;
        }
    }
    <!-- Получить готовую разметку -->
    @MvcHtmlString.Create(result.ToString())
<!-- вызов созданного пейджера -->
@Html.Partial("PagerPArtial", Model) 

@*закоментировал разметку из представления List
        чтобы в представлении сформировать строки (класс «row»
        библиотеки bootstrap), каждая строка будет содержать по три эскиза. Эскизы
        будут получаться из созданного частичного представления с помощью
        метода Html.Partial().

        @model IEnumerable<_603211_PROKHORENKO.DAL.Entities.Dish>

        @{
            ViewBag.Title = "List";
            Layout = "~/Views/Shared/_Layout.cshtml";
        }

        <h2>List</h2>

        <p>
            @Html.ActionLink("Create New", "Create")
        </p>
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.DishName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Description)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Calories)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.GroupName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Image)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MimeType)
                </th>
                <th></th>
            </tr>

        @foreach (var item in Model) {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.DishName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Calories)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.GroupName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Image)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MimeType)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id=item.DishId }) |
                    @Html.ActionLink("Details", "Details", new { id=item.DishId }) |
                    @Html.ActionLink("Delete", "Delete", new { id=item.DishId })
                </td>
            </tr>
        }

        </table>*@
